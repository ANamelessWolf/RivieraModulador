<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadDecrypting" xml:space="preserve">
    <value>Something goes wrong trying to decrypt the string.</value>
    <comment>Alice Api</comment>
  </data>
  <data name="BadEncrypting" xml:space="preserve">
    <value>Something goes wrong trying to encrypt the string.</value>
    <comment>Alice Api</comment>
  </data>
  <data name="ConfigCategoryDoesNotExist" xml:space="preserve">
    <value>The category {0} does not exist </value>
    <comment>Medaka Api</comment>
  </data>
  <data name="ConfigDoesNotExist" xml:space="preserve">
    <value>The property {0} does not exist on the category {1}</value>
    <comment>Medaka Api</comment>
  </data>
  <data name="DownloadImage" xml:space="preserve">
    <value>The image can not be downloaded from the given URL: {0}</value>
    <comment>ReL</comment>
  </data>
  <data name="DoWorkError" xml:space="preserve">
    <value>An error occurrs on the frau thred with PID: {0} while working.</value>
    <comment>Frau Api</comment>
  </data>
  <data name="EmptyStringCrypto" xml:space="preserve">
    <value>Can not encrypt or decrypt an empty string</value>
    <comment>Alice Api</comment>
  </data>
  <data name="MissingDirectory" xml:space="preserve">
    <value>The directory "{0}" does not exists.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="SavingFile" xml:space="preserve">
    <value>Error saving the file</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="XAttributeExist" xml:space="preserve">
    <value>The XAttribute "{0}", already exist on the node "{1}".</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XElementExist" xml:space="preserve">
    <value>The XElement "{0}", already exist on the node "{1}".</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlAttNameNotExist" xml:space="preserve">
    <value>The attribute name "{0}" does not exist in the node "{1}".</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlExportNode" xml:space="preserve">
    <value>Error exporting xml node {0}.</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlFileDoesNotExists" xml:space="preserve">
    <value>The Xml file {0} doesn't exists, before using this class be sure that the file exists.</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlNodeNameNotExist" xml:space="preserve">
    <value>The node "{0}" does not exist in the node "{1}".</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlNodeOutOfBounds" xml:space="preserve">
    <value>The index "{0}" is out of bounds</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="XmlParentNodeIsNull" xml:space="preserve">
    <value>Can not access the parent node, because is null.</value>
    <comment>Asuna Api</comment>
  </data>
  <data name="CanNotReadWikiFormat" xml:space="preserve">
    <value>The line format doesn't match the wikipedia format.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="EmptyDirectory" xml:space="preserve">
    <value>The selected directory has no files on it.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="PathToLong" xml:space="preserve">
    <value>The path is too long to access the file.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="RenamerSizeNotMatch" xml:space="preserve">
    <value>Can't rename the files beacuse the number of names doesn't match the size of the files.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="RootDirectoryMissing" xml:space="preserve">
    <value>The root directory "{0}" does not exists, the scanner needs an existant directory.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="UnAuthorizedAccess" xml:space="preserve">
    <value>You don't have access to this file or directory. 
Restriction found in this direction "{0}".</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="ColumnDifferentSize" xml:space="preserve">
    <value>The input data has a different size for the defined columns</value>
    <comment>Morrigan</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The file does not exists, or is not accessible.</value>
    <comment>Aerith Api</comment>
  </data>
  <data name="AssemblyDifferentName" xml:space="preserve">
    <value>The assembly names are different to compare its version.</value>
    <comment>Lilith Api</comment>
  </data>
</root>